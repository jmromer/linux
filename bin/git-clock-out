#!/usr/bin/env bash

# git clock-out
#
# Usage:
#   git clo
#
# Check-in staged work, recording:
#   1. elapsed time since the current HEAD commit was created
#   2. total elapsed time across all commits on current branch
#

set -e

usage() {
    cat "$0" | head -"$((LINENO - 4))" | grep '^#' | tail -n +2 | cut -c 3-
}

duration() {
    ((hours=${1} / 3600))
    ((mins=(${1} % 3600) / 60))
    ((secs=${1} % 60))
    printf "%02d:%02d:%02d\n" "$hours" "$mins" "$secs"
}

if [[ "$1" == "help" ]]; then
    usage
    exit 2
fi

if git diff --cached --quiet; then
    echo "Error: Nothing staged."
    exit 1
fi

# Collect timestamps
CLOCK_IN="$(git show HEAD | grep CLOCK-IN: | awk '{ print $2 }')"
TIME_START="$(git show HEAD | grep START: | sed -E 's/.+START: //')"
TIME_END="$(date +'%a, %e %b %Y %T %z')"

if [[ -z "${CLOCK_IN}" ]] || [[ -z "${TIME_START}" ]]; then
    echo "Error: No running clock. Did you forget to clock in?"
    exit 1
fi

# Calculate total elapsed time on this branch
CLOCK_HISTORY_SUM="$(
  git log |
  grep DURATION: |
  sed -E 's/DURATION: //' |
  paste -sd+ - |
  bc
)"

# Calculate elapsed since last clock-in
CLOCK_OUT="$(date +%s)"
CLOCK_SECS=$((CLOCK_OUT - CLOCK_IN))
TOTAL_SECS=$((CLOCK_HISTORY_SUM + CLOCK_SECS))

# Revise last commit with given commit message and staged work
SUBJECT="$(git show HEAD --format='%s')"
git commit --amend --message="${SUBJECT}

START: ${TIME_START}
END: ${TIME_END}

DURATION: ${CLOCK_SECS}
ELAPSED: $(duration $CLOCK_SECS)

TOTAL: $(duration $TOTAL_SECS)
" >/dev/null
